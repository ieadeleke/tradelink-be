openapi: 3.0.3
info:
  title: Tradelink Backend API
  version: 0.1.0
  description: REST API powering the Tradelink frontend, matching frontend routes and payloads.
servers:
  - url: https://your-domain.com/api/v1
    description: Production (v1 base)
  - url: http://localhost:5000/api/v1
    description: Local dev (v1 base)
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ApiMessage:
      type: object
      properties:
        message:
          type: string
    AuthLoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }
    AuthLoginResponse:
      type: object
      properties:
        token: { type: string }
        role: { type: string, enum: [buyer, seller] }
        userId: { type: string }
        sellerId: { type: string, nullable: true }
        name: { type: string }
    RegisterRequest:
      type: object
      required: [name, email, password]
      properties:
        name: { type: string }
        email: { type: string, format: email }
        password: { type: string, format: password }
        phone: { type: string }
        storeName: { type: string }
        businessLevel: { type: string }
        category: { type: string }
        address: { type: string }
        description: { type: string }
    ForgotPasswordRequest:
      type: object
      required: [email]
      properties:
        email: { type: string, format: email }
    ResetPasswordTokenRequest:
      type: object
      required: [token, password]
      properties:
        token: { type: string }
        password: { type: string, format: password }
    ResetPasswordAuthRequest:
      type: object
      required: [currentPassword, newPassword]
      properties:
        currentPassword: { type: string }
        newPassword: { type: string }
    UserProfileData:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        fullName: { type: string }
        email: { type: string, format: email }
        phone: { type: string }
        address: { type: string }
        logo: { type: string }
        avatarUrl: { type: string }
    UserProfileResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/UserProfileData'
    UpdateProfileRequest:
      type: object
      properties:
        name: { type: string }
        fullName: { type: string }
        email: { type: string, format: email }
        phone: { type: string }
        address: { type: string }
        avatarUrl: { type: string }
    Seller:
      type: object
      properties:
        _id: { type: string }
        userId: { type: string }
        storeName: { type: string }
        email: { type: string }
        phone: { type: string }
        address: { type: string }
        description: { type: string }
        businessCategory: { type: string }
        businessLevel: { type: string }
        storeLogo: { type: string }
        location:
          type: object
          properties:
            city: { type: string }
            state: { type: string }
        workingHours:
          type: object
          properties:
            mon: { type: string, example: '09:00-17:00' }
            tue: { type: string, example: '09:00-17:00' }
            wed: { type: string, example: '09:00-17:00' }
            thu: { type: string, example: '09:00-17:00' }
            fri: { type: string, example: '09:00-17:00' }
            sat: { type: string, example: '10:00-14:00' }
            sun: { type: string, example: 'Closed' }
    Review:
      type: object
      properties:
        _id: { type: string }
        userId: { type: string }
        rating: { type: number, format: float, minimum: 1, maximum: 5 }
        comment: { type: string }
        createdAt: { type: string, format: date-time }
    ReviewCreateRequest:
      type: object
      required: [sellerId, rating]
      properties:
        sellerId: { type: string }
        rating: { type: integer, minimum: 1, maximum: 5 }
        comment: { type: string }
    ReviewCreateResponse:
      type: object
      properties:
        message: { type: string }
        data:
          $ref: '#/components/schemas/Review'
    SellerPublicProfileResponse:
      type: object
      properties:
        seller: { $ref: '#/components/schemas/Seller' }
        products:
          type: array
          items: { $ref: '#/components/schemas/ProductListingItem' }
        services:
          type: array
          items: { $ref: '#/components/schemas/ServiceListingItem' }
        stats:
          type: object
          properties:
            productsCount: { type: integer }
            servicesCount: { type: integer }
            reviewsCount: { type: integer }
            rating: { type: number, nullable: true }
        reviews:
          type: array
          items: { $ref: '#/components/schemas/Review' }
    SellerPublicResponse:
      type: object
      properties:
        seller:
          $ref: '#/components/schemas/Seller'
    Product:
      type: object
      properties:
        _id: { type: string }
        userId: { type: string }
        sellerId: { type: string }
        name: { type: string }
        category: { type: string }
        price: { type: number }
        quantity: { type: integer }
        description: { type: string }
        productImg: { type: string }
    ProductPopulated:
      allOf:
        - $ref: '#/components/schemas/Product'
        - type: object
          properties:
            sellerId:
              $ref: '#/components/schemas/Seller'
    ProductListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    ProductCreateResponse:
      type: object
      properties:
        message: { type: string }
        data:
          $ref: '#/components/schemas/Product'
    ProductSingleResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ProductPopulated'
    ProductListingItem:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        category: { type: string }
        price: { type: number }
        quantity: { type: integer, nullable: true }
        productImg: { type: string, nullable: true }
    SellerProductsResponse:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductListingItem'
    Service:
      type: object
      properties:
        _id: { type: string }
        userId: { type: string }
        sellerId: { type: string }
        name: { type: string }
        category: { type: string }
        price: { type: number }
        description: { type: string }
        serviceImg: { type: string }
        email: { type: string }
        storeName: { type: string }
        location: { type: string }
        servicesOffered:
          type: array
          items: { type: string }
        workingHours:
          type: array
          items:
            type: object
            properties:
              day: { type: string }
              open: { type: string, description: "HH:mm" }
              close: { type: string, description: "HH:mm" }
              closed: { type: boolean }
        reviews:
          type: array
          items:
            type: object
            properties:
              userId: { type: string }
              rating: { type: integer, minimum: 1, maximum: 5 }
              comment: { type: string }
              createdAt: { type: string, format: date-time }
    ServicePopulated:
      allOf:
        - $ref: '#/components/schemas/Service'
        - type: object
          properties:
            sellerId:
              $ref: '#/components/schemas/Seller'
    ServiceCreateResponse:
      type: object
      properties:
        message: { type: string }
        data:
          $ref: '#/components/schemas/Service'
    ServiceSingleResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ServicePopulated'
    ServiceListingItem:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        category: { type: string }
        price: { type: number }
        serviceImg: { type: string, nullable: true }
    SellerServicesResponse:
      type: object
      properties:
        services:
          type: array
          items:
            $ref: '#/components/schemas/ServiceListingItem'
    ConversationListItem:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        lastMessage: { type: string }
        userId: { type: string, nullable: true }
        unreadCount: { type: integer }
    Message:
      type: object
      properties:
        _id: { type: string }
        conversationId: { type: string }
        senderId: { type: string }
        recipientId: { type: string }
        content: { type: string }
        isRead: { type: boolean }
    DashboardResponse:
      type: object
      properties:
        totalProducts: { type: integer }
        totalMessages: { type: integer }
        totalCustomerReviews: { type: integer }
        recentMessages:
          type: array
          items:
            $ref: '#/components/schemas/ConversationListItem'
        customerReviews:
          type: array
          items:
            type: object
            properties:
              _id: { type: string }
              customerReviews: { type: string }
              comment: { type: string }
    SellerSearchResponse:
      type: object
      properties:
        sellers:
          type: array
          items:
            $ref: '#/components/schemas/Seller'
paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user or seller
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registered; verification email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessage'
  /auth/verify-email/{token}:
    get:
      tags: [Auth]
      summary: Verify email by token
      parameters:
        - in: path
          name: token
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Email verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessage'
  /auth/login:
    post:
      tags: [Auth]
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLoginRequest'
      responses:
        '200':
          description: Auth success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthLoginResponse'
  /auth/forgot-password:
    post:
      tags: [Auth]
      summary: Request password reset link
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: Reset email sent if user exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessage'
  /auth/resend-verification:
    post:
      tags: [Auth]
      summary: Resend email verification link
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email: { type: string, format: email }
      responses:
        '200':
          description: Verification email sent if user exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessage'
  /auth/logout:
    post:
      tags: [Auth]
      summary: Logout (stateless)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMessage'
  /auth/reset-password:
    put:
      tags: [Auth]
      summary: Change password (authenticated)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordAuthRequest'
      responses:
        '200':
          description: Password changed
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiMessage' }
  /reset-password:
    post:
      tags: [Auth]
      summary: Reset password with token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordTokenRequest'
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiMessage' }
  /users/get/profile:
    get:
      tags: [Users]
      summary: Get current user profile
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: Profile
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserProfileResponse' }
  /users/profile/update:
    put:
      tags: [Users]
      summary: Update current user profile
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UpdateProfileRequest' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiMessage' }
  /users/change-password:
    put:
      tags: [Users]
      summary: Change password
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [oldPassword, newPassword]
              properties:
                oldPassword: { type: string }
                newPassword: { type: string }
      responses:
        '200':
          description: Changed
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiMessage' }
  /users/delete/profile:
    delete:
      tags: [Users]
      summary: Delete current user
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiMessage' }
  /sellers/only/profile:
    get:
      tags: [Sellers]
      summary: Get seller storeName only
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: Only profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: object
                    properties:
                      storeName: { type: string }
  /sellers/get/profile:
    get:
      tags: [Sellers]
      summary: Get full seller profile
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: Seller profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  seller: { $ref: '#/components/schemas/Seller' }
  /sellers/profile/full:
    post:
      tags: [Sellers]
      summary: Create/update seller profile with logo
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                storeName: { type: string }
                email: { type: string }
                phone: { type: string }
                description: { type: string }
                businessCategory: { type: string }
                location: { type: string, description: 'JSON string with {city,state}' }
                storeLogo: { type: string, format: binary }
      responses:
        '200':
          description: Saved
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  seller: { $ref: '#/components/schemas/Seller' }
  /sellers/dashboard:
    get:
      tags: [Sellers]
      summary: Get seller dashboard stats
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: Stats
          content:
            application/json:
              schema: { $ref: '#/components/schemas/DashboardResponse' }
  /sellers/public/{sellerId}:
    get:
      tags: [Sellers]
      summary: Get seller public profile (for buyers)
      parameters:
        - in: path
          name: sellerId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Seller profile with listings and stats
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SellerPublicProfileResponse' }
              example:
                seller:
                  _id: "665f1b889c1234567890ab12"
                  userId: "665f1bff9c1234567890abca"
                  storeName: "Acme Supplies"
                  email: "seller@acme.com"
                  phone: "+1-555-1234"
                  address: "42 Market Street, Springfield"
                  description: "Industrial tools and supplies"
                  businessCategory: "Manufacturing"
                  businessLevel: "SME"
                  storeLogo: "https://res.cloudinary.com/demo/image/upload/v1/acme.png"
                  location:
                    city: "Springfield"
                    state: "IL"
                  workingHours:
                    mon: "09:00-17:00"
                    tue: "09:00-17:00"
                    wed: "09:00-17:00"
                    thu: "09:00-17:00"
                    fri: "09:00-17:00"
                    sat: "10:00-14:00"
                    sun: "Closed"
                products:
                  - id: "665f1c2a9c1234567890abcd"
                    name: "Heavy Duty Hammer"
                    category: "Tools"
                    price: 49.99
                    quantity: 120
                    productImg: "https://res.cloudinary.com/demo/image/upload/v1/hammer.png"
                services:
                  - id: "665f2d3b8aabcdef01234567"
                    name: "Equipment Maintenance"
                    category: "Maintenance"
                    price: 150
                    serviceImg: "https://res.cloudinary.com/demo/image/upload/v1/maintenance.png"
                stats:
                  productsCount: 1
                  servicesCount: 1
                  reviewsCount: 0
                  rating: null
                reviews: []
  /sellers/search:
    get:
      tags: [Sellers]
      summary: Search sellers
      description: Search by storeName, city, state, businessCategory, or services offered.
      parameters:
        - in: query
          name: query
          required: true
          schema: { type: string }
          example: fashion
      responses:
        '200':
          description: Sellers matching the query
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SellerSearchResponse' }
              example:
                sellers:
                  - _id: "665f1b889c1234567890ab12"
                    storeName: "Fashion Hub"
                    email: "contact@fashionhub.com"
                    phone: "+1-555-1100"
                    description: "Trendy apparel and accessories"
                    businessCategory: "Fashion"
                    storeLogo: "https://res.cloudinary.com/demo/image/upload/v1/fashionhub.png"
                    location:
                      city: "Lagos"
                      state: "LA"
  /products:
    get:
      tags: [Products]
      summary: List products
      responses:
        '200':
          description: Products list
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ProductListResponse' }
    post:
      tags: [Products]
      summary: Create product with image
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [name, category, price]
              properties:
                name: { type: string }
                category: { type: string }
                price: { type: string }
                quantity: { type: string }
                description: { type: string }
                productImg: { type: string, format: binary }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ProductCreateResponse' }
  /products/seller/{sellerId}:
    get:
      tags: [Products]
      summary: List seller products (for dashboard)
      parameters:
        - in: path
          name: sellerId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Seller products
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SellerProductsResponse' }
  /products/{id}:
    get:
      tags: [Products]
      summary: Get single product (with seller)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Product
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ProductSingleResponse' }
              example:
                data:
                  _id: "665f1c2a9c1234567890abcd"
                  userId: "665f1bff9c1234567890abca"
                  sellerId:
                    _id: "665f1b889c1234567890ab12"
                    userId: "665f1bff9c1234567890abca"
                    storeName: "Acme Supplies"
                    email: "seller@acme.com"
                    phone: "+1-555-1234"
                    address: "42 Market Street, Springfield"
                    description: "Industrial tools and supplies"
                    businessCategory: "Manufacturing"
                    businessLevel: "SME"
                    storeLogo: "https://res.cloudinary.com/demo/image/upload/v1/acme.png"
                    location:
                      city: "Springfield"
                      state: "IL"
                  name: "Heavy Duty Hammer"
                  category: "Tools"
                  price: 49.99
                  quantity: 120
                  description: "Forged steel head with fiberglass handle."
                  productImg: "https://res.cloudinary.com/demo/image/upload/v1/hammer.png"
    delete:
      tags: [Products]
      summary: Delete product
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiMessage' }
  /services/all:
    get:
      tags: [Services]
      summary: List all services
      responses:
        '200':
          description: Services
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Service' }
  /services/create:
    post:
      tags: [Services]
      summary: Create a service with image
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [name, category]
              properties:
                name: { type: string }
                category: { type: string }
                price: { type: string }
                description: { type: string }
                serviceImg: { type: string, format: binary }
                servicesOffered:
                  type: array
                  items: { type: string }
                  description: "List of services offered"
                workingHours:
                  type: string
                  description: "JSON array of working hours objects: [{day, open, close, closed}]"
                reviews:
                  type: string
                  description: "JSON array of reviews: [{userId, rating, comment}]"
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ServiceCreateResponse' }
  /services/seller/{sellerId}:
    get:
      tags: [Services]
      summary: List seller services (for dashboard)
      parameters:
        - in: path
          name: sellerId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Seller services
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SellerServicesResponse' }
  /services/{id}:
    get:
      tags: [Services]
      summary: Get single service (with seller)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Service
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ServiceSingleResponse' }
              example:
                data:
                  _id: "665f2d3b8aabcdef01234567"
                  userId: "665f1bff9c1234567890abca"
                  sellerId:
                    _id: "665f1b889c1234567890ab12"
                    userId: "665f1bff9c1234567890abca"
                    storeName: "Acme Services"
                    email: "services@acme.com"
                    phone: "+1-555-6789"
                    address: "100 Service Road, Springfield"
                    description: "On-site equipment maintenance"
                    businessCategory: "Maintenance"
                    businessLevel: "SME"
                    storeLogo: "https://res.cloudinary.com/demo/image/upload/v1/acme-services.png"
                    location:
                      city: "Springfield"
                      state: "IL"
                  name: "Equipment Maintenance"
                  category: "Maintenance"
                  price: 150
                  description: "Preventive and corrective maintenance for industrial equipment."
                  serviceImg: "https://res.cloudinary.com/demo/image/upload/v1/maintenance.png"
                  email: "services@acme.com"
                  storeName: "Acme Services"
                  location: "Springfield, IL"
                  servicesOffered:
                    - "Diagnostics"
                    - "Preventive Maintenance"
                    - "Emergency Repair"
                  workingHours:
                    - { day: "Mon", open: "09:00", close: "17:00", closed: false }
                    - { day: "Tue", open: "09:00", close: "17:00", closed: false }
                    - { day: "Sun", closed: true }
                  reviews:
                    - userId: "665f1bff9c1234567890abca"
                      rating: 5
                      comment: "Great and timely service!"
                      createdAt: "2024-08-01T10:15:00Z"
    delete:
      tags: [Services]
      summary: Delete service
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiMessage' }
    patch:
      tags: [Services]
      summary: Update service fields (use subpaths below)
      deprecated: true
      description: Use the specific subpaths to update targeted fields without affecting others.
  /services/{id}/services-offered:
    patch:
      tags: [Services]
      summary: Replace servicesOffered array
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                servicesOffered:
                  type: array
                  items: { type: string }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ServiceSingleResponse' }
  /services/{id}/working-hours:
    patch:
      tags: [Services]
      summary: Replace workingHours array
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                workingHours:
                  type: array
                  items:
                    type: object
                    properties:
                      day: { type: string }
                      open: { type: string }
                      close: { type: string }
                      closed: { type: boolean }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ServiceSingleResponse' }
  /services/{id}/reviews:
    patch:
      tags: [Services]
      summary: Add a review or replace reviews array
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reviews:
                  type: array
                  items:
                    type: object
                    properties:
                      userId: { type: string }
                      rating: { type: integer }
                      comment: { type: string }
                rating: { type: integer, description: "If provided with comment, adds one review" }
                comment: { type: string }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ServiceSingleResponse' }
  /messages/get/conversations:
    get:
      tags: [Messages]
      summary: List conversations for current user
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: Conversations
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversations:
                    type: array
                    items: { $ref: '#/components/schemas/ConversationListItem' }
  /messages/inbox:
    get:
      tags: [Messages]
      summary: List messages received by current user (inbox)
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: Inbox messages sorted by newest first
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items: { $ref: '#/components/schemas/Message' }
              example:
                messages:
                  - _id: "666000111122233344440001"
                    conversationId: "665fabcd0000111122223333"
                    senderId: "buyerUserId"
                    recipientId: "currentUserId"
                    content: "Is this still available?"
                    isRead: false
                  - _id: "666000111122233344440000"
                    conversationId: "665fabcd0000111122223333"
                    senderId: "anotherBuyerId"
                    recipientId: "currentUserId"
                    content: "Can you ship internationally?"
                    isRead: true
  /messages/get/all/conversations/{userId}:
    get:
      tags: [Messages]
      summary: List full conversation with user (both directions)
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Messages sent and received, oldest first
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items: { $ref: '#/components/schemas/Message' }
              example:
                messages:
                  - _id: "666000111122233344445555"
                    conversationId: "665fabc0dede111122223333"
                    senderId: "sellerUserId"
                    recipientId: "buyerUserId"
                    content: "Hello! How can I help?"
                    isRead: true
                  - _id: "666000111122233344446666"
                    conversationId: "665fabc0dede111122223333"
                    senderId: "buyerUserId"
                    recipientId: "sellerUserId"
                    content: "I'm interested in your product."
                    isRead: false
  /messages/read/{messageId}:
    patch:
      tags: [Messages]
      summary: Mark a message as read
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: messageId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Read
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiMessage' }
  /messages/send:
    post:
      tags: [Messages]
      summary: Send a message
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [recipientId, content]
              properties:
                recipientId: { type: string }
                content: { type: string }
                conversationId: { type: string }
      responses:
        '201':
          description: Sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: object
                    properties:
                      id: { type: string }
              example:
                message:
                  id: "666000111122233344447777"
  /messages/history/{userId}:
    get:
      tags: [Messages]
      summary: Alias to list full conversation with user
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Messages sent and received
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items: { $ref: '#/components/schemas/Message' }
  /messages/reply:
    post:
      tags: [Messages]
      summary: Reply to a message (seller)
      description: Identical to send; provide `recipientId` and `content` or a `conversationId`.
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [content]
              properties:
                recipientId: { type: string, description: 'Required if conversationId not provided' }
                conversationId: { type: string, description: 'If provided, recipientId can be omitted' }
                content: { type: string }
      responses:
        '201':
          description: Sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: object
                    properties:
                      id: { type: string }
              example:
                message:
                  id: "666000111122233344448888"
  /reviews:
    post:
      tags: [Reviews]
      summary: Create a review for a seller
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewCreateRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewCreateResponse'
